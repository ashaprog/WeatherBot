import telebot
import pyowm
import gptkey
import secretWeather
import openai
import owmToken
import random
from telebot import types
bot = telebot.TeleBot(token=secretWeather.botToken)

openai.api_key = (gptkey.gptToken)

owm = pyowm.OWM(owmToken.token)

mgr = owm.weather_manager()

#–¥–≤–∏–∂–æ–∫ ChatGPT

engine = 'text-davinci-003'

@bot.message_handler(commands=['help'])
def help(message):
    bot.send_message(message.chat.id, '–°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥:\n-–ö–Ω–æ–ø–∫–∞ "–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ" –æ—Ç–ø—Ä–∞–≤–∏—Ç –≤–∞—à—É –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é –∏ –±–æ—Ç —Ä–∞—Å—Å–∫–∞–∂–µ—Ç –≤–∞–º –æ –ø–æ–≥–æ–¥–µ –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ, –∏ —Å–∞–º ChatGPT –ø–æ–¥—Å–∫–∞–∂–µ—Ç –≤–∞–º —á—Ç–æ –Ω–∞–¥–µ—Ç—å)\n'
                                      '-–ö–Ω–æ–ø–∫–∞ /city –ø–æ–∑–≤–æ–ª–∏—Ç –≤–∞–º –≤–≤–µ—Å—Ç–∏ –≥–æ—Ä–æ–¥ –≤—Ä—É—á–Ω—É—é –∏ —É–∑–Ω–∞—Ç—å —Ç—É –∂–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é)')

@bot.message_handler(commands=['start'])
def text(message):
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=False)
    but1 = types.KeyboardButton('/city')
    but2 = types.KeyboardButton('/help')
    get_location = types.KeyboardButton("–û—Ç–ø—Ä–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location=True)
    keyboard.add(get_location, but1, but2)
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É –∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—é –ø–æ –æ–¥–µ–∂–¥–µ –æ—Ç ChatGPT - –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –ø–µ—Ä–µ–¥–∞–π –º–Ω–µ —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏–ª–∏ –≤–≤–µ–¥–∏ /city —á—Ç–æ–±—ã –≤–≤–µ—Å—Ç–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –≤—Ä—É—á–Ω—É—é", reply_markup=keyboard)

#—Ö–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏

@bot.message_handler(content_types=["location"])
def locatWeather(message):
    if message.location is not None:
        lat = message.location.latitude
        lon = message.location.longitude
        observation = mgr.weather_at_coords(lat, lon)
        w = observation.weather
        weathercondRus = {'clear sky': '—è—Å–Ω–æ', 'few clouds': '–º–∞–ª–æ-–æ–±–ª–∞—á–Ω–æ', 'scattered clouds': '–Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±–ª–∞—á–Ω–æ',
                          'broken clouds': '–æ–±–ª–∞—á–Ω–æ', 'shower rain': '–ª–∏–≤–µ–Ω—å',
                          'rain': '–¥–æ–∂–¥—å', 'thunderstorm': '–≥—Ä–æ–∑–∞', 'snow': '–∏–¥–µ—Ç —Å–Ω–µ–≥', 'mist': '—Ç—É–º–∞–Ω–Ω–æ'}
        w.detailed_status = weathercondRus[w.detailed_status]
        wind = w.wind()['speed']
        feel = int(w.temperature('celsius')['feels_like'])
        temp = int(w.temperature('celsius')['temp'])
        prompt = f"–°–∫–∞–∂–∏ —á—Ç–æ –æ–¥–µ—Ç—å –≤ {w.detailed_status} –ø–æ–≥–æ–¥—É –≤ 1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –ø—Ä–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ {feel} –≥—Ä–∞–¥—É—Å–æ–≤"
        completion = openai.Completion.create(engine=engine, prompt=prompt, temperature=0.5, max_tokens=1000)
        completionG = completion.choices[0]['text']
        bot.send_message(message.chat.id, f'–í –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ —Å–µ–π—á–∞—Å {w.detailed_status} \n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {temp} –≥—Ä–∞–¥—É—Å–æ–≤. –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feel} –≥—Ä–∞–¥—É—Å–æ–≤. –í–µ—Ç–µ—Ä {wind} –º/—Å. {completionG}')

#—Ö–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /city

@bot.message_handler(commands=['city'])
def city(message):
    city = message.text
    bot.send_message(message.chat.id, "–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞")
    bot.register_next_step_handler(message, cityWeather)
def cityWeather(message):
    try:
        bot.send_message(message.chat.id, '–ò—â—É –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ {city}'.format(city=message.text))
        data = message.text
        observation = mgr.weather_at_place(data)
        w = observation.weather
        wind = w.wind()['speed']
        temp = int(w.temperature('celsius')['temp'])
        weathercondRus = {'clear sky': '—è—Å–Ω–æ', 'few clouds': '–º–∞–ª–æ-–æ–±–ª–∞—á–Ω–æ', 'scattered clouds': '–Ω–µ—Å–∫–æ–ª—å–∫–æ –æ–±–ª–∞—á–Ω–æ',
                          'broken clouds': '–æ–±–ª–∞—á–Ω–æ', 'shower rain': '–ª–∏–≤–µ–Ω—å',
                          'rain': '–¥–æ–∂–¥—å', 'thunderstorm': '–≥—Ä–æ–∑–∞', 'snow': '–∏–¥–µ—Ç —Å–Ω–µ–≥', 'mist': '—Ç—É–º–∞–Ω–Ω–æ'}
        w.detailed_status = weathercondRus[w.detailed_status]
        feel = int(w.temperature('celsius')['feels_like'])
        prompt = f"–°–∫–∞–∂–∏ —á—Ç–æ –æ–¥–µ—Ç—å –≤ {w.detailed_status} –ø–æ–≥–æ–¥—É –≤ 1 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–∏ –ø—Ä–∏ —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–µ {feel} –≥—Ä–∞–¥—É—Å–æ–≤"
        completion = openai.Completion.create(engine=engine, prompt=prompt, temperature=0.5, max_tokens=1000)
        completionG = completion.choices[0]['text']
        bot.send_message(message.chat.id,
                         f'–í –≥–æ—Ä–æ–¥–µ {message.text} —Å–µ–π—á–∞—Å {w.detailed_status} \n–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {temp} –≥—Ä–∞–¥—É—Å–æ–≤. –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feel} –≥—Ä–∞–¥—É—Å–æ–≤. –í–µ—Ç–µ—Ä {wind} –º/—Å {completionG}')
    except Exception as error:
        bot.send_message(message.chat.id, '–Ø –Ω–µ –Ω–∞—à–µ–ª —Ç–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑)')

#—Ö–µ–Ω–¥–ª–µ—Ä —Ä–∞–Ω–¥–æ–º–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

@bot.message_handler(content_types=['text'])
def text_handler(message):
    bot.send_message(message.chat.id, "–Ø –≤–∞—Å –Ω–µ –ø–æ–Ω—è–ª! –ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ —É–∑–Ω–∞—Ç—å –ø–æ–≥–æ–¥—É - –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /city, –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é! ")
    pass

bot.polling(none_stop=True)

# def city(message):
#     bot.send_message(message.chat.id, '–ò—â—É –ø–æ–≥–æ–¥—É –≤ –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ')
#     time.sleep(2)
#
#     #data = message.text
#     observation = mgr.weather_at_coords(lat, lon)
#     w = observation.weather
#     wind = w.wind()
#     temp = w.temperature('celsius')['temp']
#     max_temp = w.temperature('celsius')['temp_max']
#     min_temp = w.temperature('celsius')['temp_min']
#     feel = w.temperature('celsius')['feels_like']
#     bot.send_message(message.chat.id, f'–í –≤–∞—à–µ–º –≥–æ—Ä–æ–¥–µ —Å–µ–π—á–∞—Å {w.detailed_status} \n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {max_temp} –≥—Ä–∞–¥—É—Å–æ–≤, –∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {min_temp} –≥—Ä–∞–¥—É—Å–æ–≤. –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feel} –≥—Ä–∞–¥—É—Å–æ–≤')






# @bot.message_handler(commands=['city'])
# def cmd_city(message):
#     send = bot.send_message(message.chat.id, '–í–≤–µ–¥–∏ –≥–æ—Ä–æ–¥')
#     bot.register_next_step_handler(send, city)
#
#
# def city(message):
#     bot.send_message(message.chat.id, '–ò—â—É –ø–æ–≥–æ–¥—É –≤ –≥–æ—Ä–æ–¥–µ {city}'.format(city=message.text))
#     time.sleep(2)
#
#     data = message.text
#     observation = mgr.weather_at_place(data)
#     w = observation.weather
#     wind = w.wind()
#     temp = w.temperature('celsius')['temp']
#     max_temp = w.temperature('celsius')['temp_max']
#     min_temp = w.temperature('celsius')['temp_min']
#     feel = w.temperature('celsius')['feels_like']
#     bot.send_message(message.chat.id, f'–í –≥–æ—Ä–æ–¥–µ {message.text} —Å–µ–π—á–∞—Å {w.detailed_status} \n–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {max_temp} –≥—Ä–∞–¥—É—Å–æ–≤, –∞ –º–∏–Ω–∏–º–∞–ª—å–Ω–∞—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ {min_temp} –≥—Ä–∞–¥—É—Å–æ–≤. –û—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feel} –≥—Ä–∞–¥—É—Å–æ–≤')

    # det = w.detailed_status()
    #hum = w.humidity()

    # wnd = json.dumps(wind, sort_keys=True, indent=4)
    # tmp = json.dumps(temp, sort_keys=True, indent=4)
    # pwnd = json.loads(wnd)
    # ptmp = json.loads(tmp)
    # winds = pwnd['speed']
    # tmp = ptmp['temp']
    # tmpx = ptmp['temp_max']
    # tmpn = ptmp['temp_min']


    # bot.send_message(message.chat.id,
    #                  '–í  {city}: \n üå° –°–µ–π—á–∞—Å: {tmp}¬∞C \n üå° –ú–∞–∫—Å–∏–º—É–º: {tmpx}¬∞C \n üå° –ú–∏–Ω–∏–º—É–º: {tmpn}¬∞C \n üí® –í–µ—Ç–µ—Ä: {wind} –º/—Å \n üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%'.format(
    #                      city=message.text,
    #                      tmp=(tmp), tmpx=(tmpx), tmpn=(tmpn),
    #                      humidity=(hum), wind=(winds)))


 # def get_location(lat, lon):
#     url = f"https://yandex.ru/pogoda/maps/nowcast?lat={lat}&lon={lon}&via=hnav&le_Lightning=1"
#     return url
#
#
# def weather(city: str):
#     owm = OWM('5626e8fbf656b5e2eac0cb473f525efa')
#     mgr = owm.weather_manager()
#     observation = mgr.weather_at_place(city)
#     weather = observation.weather
#     location = get_location(observation.location.lat, observation.location.lon)
#     temperature = weather.temperature("celsius")
#     return temperature, location
#
# @bot.message_handler(commands=['weather'])
# def get_text_messages(message):
#     bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞)")
#     bot.register_next_step_handler(message, get_weather)
#
# def get_weather(message):
#     city = message.text
#     try:
#         w = weather(city)
#         bot.send_message(message.chat.id, f'–í –≥–æ—Ä–æ–¥–µ {city} —Å–µ–π—á–∞—Å {round(w[0]["temp"])} –≥—Ä–∞–¥—É—Å–æ–≤' f'—á—É–≤—Å—Ç–≤—É–µ—Ç—Å—è –∫–∞–∫{round(w[0]["feels_like"])} –≥—Ä–∞–¥—É—Å–æ–≤')
#         bot.send_message(message.chat.id, w[1])
#         bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞")
#         bot.register_next_step_handler(message, get_weather)
#     except Exception:
#         bot.send_message(message.chat.id, "–£–ø—Å... –¢–∞–∫–æ–≥–æ –≥–æ—Ä–æ–¥–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑")
#         bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞")
#         bot.register_next_step_handler(message, get_weather)

